{"version":3,"sources":["utils.js","redux/actions.js","redux/reducer.js","components/Comment.js","components/CommentList.js","components/ModalComments.js","components/PostComments.js","components/PostHandler.js","components/Post.js","components/User.js","components/ModalAuthor.js","components/Pagination.js","components/Form.js","components/PostList.js","components/PostListHandler.js","App.js","serviceWorker.js","index.js"],"names":["getData","url","fetch","then","response","json","CHANGE_NEW_POST_TITLE","CHANGE_NEW_POST_TEXT","CANCEL_SAVE_POST","SHOW_COMMENTS","HIDE_COMMENTS","SHOW_AUTHOR","HIDE_AUTHOR","CREATE_POST","CHANGE_PAGE","FILL_DATA","SAVE_POST","SHOW_POST","HIDE_POST","loadData","dispatch","Promise","all","concat","_ref","_ref2","Object","slicedToArray","posts","users","comments","type","payload","showModalComments","postId","showModalAuthor","userId","showPost","hidePost","initialState","isModalCommentsVisible","isModalAuthorVisible","currentPostId","currentUserId","postCreating","dataLoaded","newPostTitle","newPostText","usersMap","newPost","activePage","actionHandlers","_actionHandlers","defineProperty","state","action","objectSpread","reduce","acc","user","id","title","trim","text","Comment","props","body","react_default","a","createElement","CommentList","map","comment","key","ModalComments","hideModalComments","lib_default","visible","width","height","effect","onClickAway","className","onClick","PostComments","post","filter","postItem","PostHandler","connect","User","Fragment","name","email","ModalAuthor","hideModalAuthor","Pagination","changePage","numberPages","Math","ceil","length","Array","fill","displayPage","index","numberPage","random","Form","changeNewPostTitle","changeNewPostText","cancelSavePost","savePost","placeholder","onChange","event","alert","PostList","_Component","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","value","pageSize","pageNumber","_this$props","createPost","postItems","slice","Component","PostListHandler","target","store","createStore","undefined","handler","applyMiddleware","thunk","App","es","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cadd26f9.chunk.js","sourcesContent":["export function getData(url) {\n  return fetch(url).then(response => response.json());\n}\n\nexport function getActivePosts(array, pageSize, pageNumber) {\n  pageNumber -= 1;\n  return array.slice(pageNumber * pageSize, (pageNumber + 1) * pageSize);\n}\n","import { getData } from '../utils';\n\nexport const CHANGE_NEW_POST_TITLE = 'change_new_post_title';\nexport const CHANGE_NEW_POST_TEXT = 'change_new_post_text';\nexport const CANCEL_SAVE_POST = 'cancel_save_post';\nexport const SHOW_COMMENTS = 'show_comments';\nexport const HIDE_COMMENTS = 'hide_comments';\nexport const SHOW_AUTHOR = 'show_author';\nexport const HIDE_AUTHOR = 'hide_author';\nexport const CREATE_POST = 'create_post';\nexport const CHANGE_PAGE = 'change_page';\nexport const FILL_DATA = 'fill_data';\nexport const SAVE_POST = 'save_post';\nexport const SHOW_POST = 'show_post';\nexport const HIDE_POST = 'hide_post';\n\nconst url = 'https://jsonplaceholder.typicode.com/';\n\nexport function loadData() {\n  return (dispatch) => {\n    Promise.all([\n      getData(`${url}posts`),\n      getData(`${url}users`),\n      getData(`${url}comments`),\n    ])\n      .then(([posts, users, comments]) => {\n        dispatch(fillData({ posts, users, comments }));\n      });\n  };\n}\n\nexport function fillData(data) {\n  return {\n    type: FILL_DATA,\n    payload: data,\n  };\n}\n\nexport function showModalComments(postId) {\n  return {\n    type: SHOW_COMMENTS,\n    payload: postId,\n  };\n}\n\nexport function hideModalComments() {\n  return {\n    type: HIDE_COMMENTS,\n  };\n}\n\nexport function showModalAuthor(userId) {\n  return {\n    type: SHOW_AUTHOR,\n    payload: userId,\n  };\n}\n\nexport function hideModalAuthor() {\n  return {\n    type: HIDE_AUTHOR,\n  };\n}\n\nexport function showPost(postId) {\n  return {\n    type: SHOW_POST,\n    payload: postId,\n  };\n}\n\nexport function hidePost() {\n  return {\n    type: HIDE_POST,\n  };\n}\n\nexport function createPost() {\n  return {\n    type: CREATE_POST,\n  };\n}\n\nexport function changeNewPostTitle(value) {\n  return {\n    type: CHANGE_NEW_POST_TITLE,\n    payload: value,\n  };\n}\n\nexport function changeNewPostText(value) {\n  return {\n    type: CHANGE_NEW_POST_TEXT,\n    payload: value,\n  };\n}\n\nexport function savePost() {\n  alert('Saved successful!');\n  return {\n    type: SAVE_POST,\n  };\n}\n\nexport function cancelSavePost() {\n  return {\n    type: CANCEL_SAVE_POST,\n  };\n}\n\nexport function changePage(numberPage) {\n  return {\n    type: CHANGE_PAGE,\n    payload: numberPage,\n  };\n}\n","import {\n  CANCEL_SAVE_POST, CHANGE_PAGE,\n  CHANGE_NEW_POST_TITLE,\n  CHANGE_NEW_POST_TEXT,\n  SHOW_COMMENTS,\n  HIDE_COMMENTS,\n  SHOW_AUTHOR,\n  HIDE_AUTHOR,\n  CREATE_POST,\n  SHOW_POST,\n  HIDE_POST,\n  FILL_DATA,\n  SAVE_POST,\n} from './actions';\n\nconst initialState = {\n  isModalCommentsVisible: false,\n  isModalAuthorVisible: false,\n  currentPostId: null,\n  currentUserId: null,\n  postCreating: null,\n  dataLoaded: false,\n  newPostTitle: '',\n  newPostText: '',\n  usersMap: null,\n  comments: null,\n  newPost: null,\n  activePage: 1,\n  posts: null,\n};\n\nconst actionHandlers = {\n  [FILL_DATA]: (state, action) => ({\n    ...state,\n    dataLoaded: true,\n    usersMap: action.payload.users\n      .reduce((acc, user) => ({ ...acc, [user.id]: user }), {}),\n    comments: action.payload.comments,\n    posts: action.payload.posts,\n\n  }),\n  [SHOW_COMMENTS]: (state, action) => ({\n    ...state,\n    isModalCommentsVisible: true,\n    currentPostId: action.payload,\n  }),\n  [HIDE_COMMENTS]: state => ({\n    ...state,\n    isModalCommentsVisible: false,\n    currentPostId: null,\n  }),\n  [SHOW_AUTHOR]: (state, action) => ({\n    ...state,\n    isModalAuthorVisible: true,\n    currentUserId: action.payload,\n  }),\n  [HIDE_AUTHOR]: state => ({\n    ...state,\n    isModalAuthorVisible: false,\n    currentUserId: null,\n  }),\n  [SHOW_POST]: (state, action) => ({\n    ...state,\n    currentPostId: action.payload,\n  }),\n  [HIDE_POST]: state => ({\n    ...state,\n    currentPostId: null,\n  }),\n  [CREATE_POST]: state => ({\n    ...state,\n    postCreating: true,\n  }),\n\n  [CHANGE_NEW_POST_TITLE]: (state, action) => ({\n    ...state,\n    newPostTitle: action.payload,\n  }),\n\n  [CHANGE_NEW_POST_TEXT]: (state, action) => ({\n    ...state,\n    newPostText: action.payload,\n  }),\n  [SAVE_POST]: state => ({\n    ...state,\n    newPost: {\n      userId: 1,\n      title: state.newPostTitle.trim(),\n      text: state.newPostText.trim(),\n    },\n    newPostTitle: '',\n    newPostText: '',\n    postCreating: false,\n  }),\n  [CANCEL_SAVE_POST]: state => ({\n    ...state,\n    newPostTitle: '',\n    newPostText: '',\n    postCreating: null,\n  }),\n  [CHANGE_PAGE]: (state, action) => ({\n    ...state,\n    activePage: action.payload,\n  }),\n};\n\nexport const reducer = (state = initialState, action) => {\n  const handler = actionHandlers[action.type];\n  return handler\n    ? handler(state, action)\n    : state;\n};\n","import React from 'react';\n\nexport function Comment(props) {\n  const { body } = props;\n  return (\n    <li>\n      <span>{body}</span>\n    </li>\n  );\n}\n","import React from 'react';\nimport { Comment } from './Comment';\n\nexport function CommentList(props) {\n  const { comments, currentPostId } = props;\n\n  return (\n    comments.map(\n      comment => (comment.postId === currentPostId\n        ? <Comment key={comment.id} body={comment.body} />\n        : null)\n    )\n  );\n}\n","import React from 'react';\nimport Modal from 'react-awesome-modal';\nimport { CommentList } from './CommentList';\n\nexport function ModalComments(props) {\n  const {\n    isModalCommentsVisible,\n    hideModalComments,\n    currentPostId,\n    comments,\n  } = props;\n\n  return (\n    <Modal\n      visible={isModalCommentsVisible}\n      width=\"70%\"\n      height=\"70%\"\n      effect=\"fadeInLeft\"\n      onClickAway={() => hideModalComments()}\n    >\n      <section className=\"modal\">\n        <h1>\nPostId\n          {currentPostId}\n        </h1>\n        <CommentList\n          comments={comments}\n          currentPostId={currentPostId}\n        />\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={() => hideModalComments()}\n        >\n                    Close\n        </button>\n      </section>\n    </Modal>\n  );\n}\n","import React from 'react';\nimport { CommentList } from './CommentList';\n\nexport function PostComments(props) {\n  const {\n    posts,\n    comments,\n    currentPostId,\n    hidePost,\n  } = props;\n  const post = posts.filter(postItem => postItem.id === currentPostId);\n\n  return (\n    <section className=\"postComments\">\n      <h1>{post[0].title}</h1>\n      <p>{post[0].body}</p>\n      <CommentList currentPostId={currentPostId} comments={comments} />\n      <button\n        className=\"button\"\n        type=\"button\"\n        onClick={hidePost}\n      >\n          Back to posts\n      </button>\n    </section>\n  );\n}\n","import connect from 'react-redux/es/connect/connect';\nimport { Post } from './Post';\nimport {\n  showModalComments,\n  showModalAuthor,\n  hidePost,\n  showPost,\n} from '../redux/actions';\n\nfunction mapStateToProps(state) {\n  return {\n    isModalCommentsVisible: state.isModalCommentsVisible,\n    isModalAuthorVisible: state.isModalAuthorVisible,\n    comments: state.comments,\n    usersMap: state.usersMap,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    showModalAuthor: userId => dispatch(showModalAuthor(userId)),\n    showModalComments: id => dispatch(showModalComments(id)),\n    showPost: postId => dispatch(showPost(postId)),\n    hidePost: () => dispatch(hidePost()),\n  };\n}\n\nexport const PostHandler = connect(mapStateToProps, mapDispatchToProps)(Post);\n","import React from 'react';\n\nexport function Post(props) {\n  const {\n    showModalComments,\n    showModalAuthor,\n    showPost,\n    userId,\n    title,\n    id,\n  } = props;\n\n  return (\n    <tr>\n      <td>\n        <span>{id}</span>\n      </td>\n      <td>\n        <p className=\"title\" onClick={() => showPost(id)}>{title}</p>\n      </td>\n      <td>\n        <p className=\"title\" onClick={() => showModalComments(id)}>Comments</p>\n      </td>\n      <td>\n        <p className=\"title\" onClick={() => showModalAuthor(userId)}>\n          Author\n          {userId}\n        </p>\n      </td>\n    </tr>\n  );\n}\n","import React from 'react';\n\nexport function User(props) {\n  const { user } = props;\n  return (\n    <>\n      <h2>{user.name}</h2>\n      <h5>{user.email}</h5>\n    </>\n  );\n}\n","import React from 'react';\nimport Modal from 'react-awesome-modal';\nimport { User } from './User';\n\nexport function ModalAuthor(props) {\n  const {\n    isModalAuthorVisible,\n    hideModalAuthor,\n    currentUserId,\n    user,\n  } = props;\n\n  return (\n    <Modal\n      visible={isModalAuthorVisible}\n      width=\"40%\"\n      height=\"40%\"\n      effect=\"fadeInRight\"\n      onClickAway={() => hideModalAuthor()}\n    >\n      <section className=\"modal\">\n        <h1>\nUserId\n          {currentUserId}\n        </h1>\n        {currentUserId ? <User user={user} /> : null}\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={() => hideModalAuthor()}\n        >\n                    Close\n        </button>\n      </section>\n    </Modal>\n  );\n}\n","import React from 'react';\n\nexport function Pagination(props) {\n  const { posts, activePage, changePage } = props;\n  const numberPages = Math.ceil(posts.length / 10);\n  const displayPages = new Array(numberPages).fill(1);\n\n  return (\n    displayPages.map((displayPage, index) => {\n      const numberPage = index + 1;\n      return (\n        <button\n          type=\"button\"\n          className={activePage !== numberPage ? 'button' : 'button active'}\n          onClick={() => changePage(numberPage)}\n          key={Math.random()}\n        >\n          {numberPage}\n        </button>\n      );\n    })\n  );\n}\n","import React from 'react';\n\nexport function Form(props) {\n  const {\n    changeNewPostTitle,\n    changeNewPostText,\n    cancelSavePost,\n    newPostTitle,\n    newPostText,\n    savePost,\n  } = props;\n  return (\n    <form>\n      <section>\n        <input\n          type=\"text\"\n          placeholder=\"title\"\n          className=\"input\"\n          onChange={event => changeNewPostTitle(event)}\n        />\n        <input\n          type=\"text\"\n          placeholder=\"text\"\n          className=\"input\"\n          onChange={event => changeNewPostText(event)}\n        />\n      </section>\n      <section className=\"form_button\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={() => {\n            if (newPostTitle.trim() !== '' && newPostText.trim() !== '') {\n              return savePost();\n            }\n            alert('please fill the empty fields');\n          }\n          }\n        >\n                   Save\n        </button>\n        <button type=\"button\" className=\"button\" onClick={cancelSavePost}>\n                   Cancel\n        </button>\n      </section>\n    </form>\n  );\n}\n","import React, { Component } from 'react';\nimport { ModalComments } from './ModalComments';\nimport { PostComments } from './PostComments';\nimport { PostHandler } from './PostHandler';\nimport { ModalAuthor } from './ModalAuthor';\nimport { Pagination } from './Pagination';\nimport { Form } from './Form';\nimport { getActivePosts } from '../utils';\n\nexport class PostList extends Component {\n  componentDidMount() {\n    this.props.loadData();\n  }\n\n  render() {\n    const {\n      isModalCommentsVisible,\n      isModalAuthorVisible,\n      hideModalComments,\n      hideModalAuthor,\n      changeNewPostTitle,\n      changeNewPostText,\n      cancelSavePost,\n      currentPostId,\n      currentUserId,\n      postCreating,\n      dataLoaded,\n      activePage,\n      newPostTitle,\n      newPostText,\n      changePage,\n      createPost,\n      savePost,\n      hidePost,\n      usersMap,\n      comments,\n      posts,\n    } = this.props;\n\n    if (postCreating) {\n      return (\n        <Form\n          changeNewPostTitle={changeNewPostTitle}\n          changeNewPostText={changeNewPostText}\n          cancelSavePost={cancelSavePost}\n          newPostTitle={newPostTitle}\n          newPostText={newPostText}\n          savePost={savePost}\n        />\n      );\n    }\n\n    if (currentPostId && !isModalCommentsVisible) {\n      return (\n        <PostComments\n          currentPostId={currentPostId}\n          comments={comments}\n          hidePost={hidePost}\n          posts={posts}\n        />\n      );\n    }\n\n    if (dataLoaded) {\n      const activePosts = getActivePosts(posts, 10, activePage);\n      const postItems = activePosts.map((post, index) => (\n        <PostHandler\n          userId={post.userId}\n          title={post.title}\n          body={post.body}\n          index={index}\n          key={post.id}\n          id={post.id}\n        />\n      ));\n\n      return (\n        <div>\n          <ModalAuthor\n            isModalAuthorVisible={isModalAuthorVisible}\n            hideModalAuthor={hideModalAuthor}\n            user={usersMap[currentUserId]}\n            currentUserId={currentUserId}\n          />\n          <ModalComments\n            isModalCommentsVisible={isModalCommentsVisible}\n            hideModalComments={hideModalComments}\n            currentPostId={currentPostId}\n            comments={comments}\n          />\n          <button\n            type=\"button\"\n            className=\"button createPost\"\n            onClick={createPost}\n          >\n                        Create Post\n          </button>\n          <table className=\"table\">\n            <thead>\n              <tr>\n                <th>Id</th>\n                <th>Title</th>\n                <th>Comments</th>\n                <th>User</th>\n              </tr>\n            </thead>\n            <tbody>\n              {postItems}\n            </tbody>\n          </table>\n          <section className=\"pagination\">\n            <Pagination\n              posts={posts}\n              activePage={activePage}\n              changePage={changePage}\n            />\n          </section>\n        </div>\n      );\n    }\n    return (\n      <h1 className=\"loading\">Loading...</h1>\n    );\n  }\n}\n","import connect from 'react-redux/es/connect/connect';\nimport { PostList } from './PostList';\nimport {\n  hideModalComments,\n  hideModalAuthor,\n  showModalComments,\n  showModalAuthor,\n  changeNewPostText,\n  changeNewPostTitle,\n  cancelSavePost,\n  changePage,\n  createPost,\n  hidePost,\n  loadData,\n  savePost,\n  showPost,\n} from '../redux/actions';\n\nfunction mapStateToProps(state) {\n  return {\n    isModalCommentsVisible: state.isModalCommentsVisible,\n    isModalAuthorVisible: state.isModalAuthorVisible,\n    currentPostId: state.currentPostId,\n    currentUserId: state.currentUserId,\n    postCreating: state.postCreating,\n    newPostTitle: state.newPostTitle,\n    newPostText: state.newPostText,\n    activePage: state.activePage,\n    dataLoaded: state.dataLoaded,\n    comments: state.comments,\n    usersMap: state.usersMap,\n    posts: state.posts,\n\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    changeNewPostTitle: event => dispatch(changeNewPostTitle(event.target.value)),\n    changeNewPostText: event => dispatch(changeNewPostText(event.target.value)),\n    showModalComments: postId => dispatch(showModalComments(postId)),\n    hideModalComments: () => dispatch(hideModalComments()),\n    showModalAuthor: userId => dispatch(showModalAuthor(userId)),\n    hideModalAuthor: () => dispatch(hideModalAuthor()),\n    cancelSavePost: () => dispatch(cancelSavePost()),\n    changePage: index => dispatch(changePage(index)),\n    createPost: () => dispatch(createPost()),\n    showPost: id => dispatch(showPost(id)),\n    hidePost: () => dispatch(hidePost()),\n    savePost: () => dispatch(savePost()),\n    loadData: () => dispatch(loadData()),\n  };\n}\n\nexport const PostListHandler = connect(mapStateToProps, mapDispatchToProps)(PostList);\n","import React from 'react';\nimport './App.css';\nimport { applyMiddleware, createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport { reducer } from './redux/reducer';\nimport { PostListHandler } from './components/PostListHandler';\n\nconst store = createStore(reducer, applyMiddleware(thunk));\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <PostListHandler />\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}